---
export interface Props {
  code: string;
  language?: string;
  title?: string;
  showLineNumbers?: boolean;
}

const { code, language = 'bash', title, showLineNumbers = false } = Astro.props;

// Simple syntax highlighting classes based on language
const getLanguageClass = (lang: string) => {
  const classes: Record<string, string> = {
    bash: 'language-bash',
    javascript: 'language-js',
    typescript: 'language-ts',
    python: 'language-python',
    yaml: 'language-yaml',
    json: 'language-json',
  };
  return classes[lang] || 'language-text';
};
---

<div class="code-block-wrapper mb-4">
  {title && (
    <div class="code-block-title bg-bg-card border border-border-default border-b-0 px-4 py-2 rounded-t-lg">
      <span class="text-text-secondary text-sm font-medium">{title}</span>
    </div>
  )}
  <div class="code-block relative bg-bg-card border border-border-default rounded-lg overflow-hidden" class:list={[title && 'rounded-t-none']}>
    <button
      class="copy-button absolute top-4 right-4 px-3 py-1.5 bg-bg-deep rounded text-text-secondary hover:text-lime-green transition-colors text-sm font-medium z-10"
      data-code={code}
      aria-label="Copy code to clipboard"
    >
      <i class="fa-solid fa-copy mr-1.5"></i>
      <span class="copy-text">Copy</span>
    </button>
    <pre class="p-4 pr-28 min-h-[3rem] overflow-x-auto text-sm"><code class={getLanguageClass(language)}>{code}</code></pre>
  </div>
</div>

<script>
  // Client-side code for copy functionality
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('.copy-button');

    copyButtons.forEach((button) => {
      button.addEventListener('click', async () => {
        const code = button.getAttribute('data-code');
        const copyText = button.querySelector('.copy-text');

        if (!code || !copyText) return;

        try {
          await navigator.clipboard.writeText(code);

          // Update button text
          const originalText = copyText.textContent;
          copyText.textContent = 'Copied!';
          button.classList.add('text-lime-green');

          // Reset after 2 seconds
          setTimeout(() => {
            copyText.textContent = originalText;
            button.classList.remove('text-lime-green');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy code:', err);
          copyText.textContent = 'Failed';
          setTimeout(() => {
            copyText.textContent = 'Copy';
          }, 2000);
        }
      });
    });
  });
</script>

<style>
  .code-block pre {
    margin: 0;
    background: transparent;
    padding: 1rem;
    padding-right: 7rem;
    min-height: 3rem;
  }

  .code-block code {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
    line-height: 1.6;
    color: var(--color-text-primary);
  }

  .copy-button {
    opacity: 1;
    transition: color 0.2s;
  }

  .copy-button:focus {
    outline: 2px solid var(--color-lime-green);
    outline-offset: 2px;
  }
</style>
