---
export interface Props {
  stepNumber: number;
  title: string;
  description?: string;
  status?: 'pending' | 'in-progress' | 'completed';
}

const { stepNumber, title, description, status = 'pending' } = Astro.props;

// Status-based styling
const getStatusClasses = (status: string) => {
  switch (status) {
    case 'completed':
      return {
        border: 'border-lime-green',
        numberBg: 'bg-lime-green',
        numberText: 'text-bg-deep',
        icon: 'fa-solid fa-check',
      };
    case 'in-progress':
      return {
        border: 'border-cyber-blue',
        numberBg: 'bg-cyber-blue',
        numberText: 'text-bg-deep',
        icon: 'fa-solid fa-spinner fa-spin',
      };
    case 'pending':
    default:
      return {
        border: 'border-border-default',
        numberBg: 'bg-bg-deep',
        numberText: 'text-text-secondary',
        icon: '',
      };
  }
};

const statusClasses = getStatusClasses(status);
---

<div class={`step-card bg-bg-card border ${statusClasses.border} rounded-lg p-4 mb-3 transition-colors`}>
  <div class="flex items-start gap-4">
    <!-- Step Number -->
    <div class={`step-number flex-shrink-0 w-10 h-10 ${statusClasses.numberBg} rounded-full flex items-center justify-center font-bold`}>
      {status === 'completed' || status === 'in-progress' ? (
        <i class={`${statusClasses.icon} ${statusClasses.numberText} text-sm`} aria-hidden="true"></i>
      ) : (
        <span class={statusClasses.numberText}>{stepNumber}</span>
      )}
    </div>

    <!-- Content -->
    <div class="flex-1 min-w-0">
      <h3 class="step-title text-text-primary font-semibold text-lg mb-1">
        {title}
      </h3>
      {description && (
        <p class="step-description text-text-secondary text-sm leading-relaxed">
          {description}
        </p>
      )}
    </div>
  </div>
</div>
