---
export interface Props {
  output: string;
  title?: string;
  type?: 'success' | 'error' | 'info' | 'default';
  showPrompt?: boolean;
}

const { output, title, type = 'default', showPrompt = false } = Astro.props;

// Type-based styling
const getTypeClasses = (outputType: string) => {
  switch (outputType) {
    case 'success':
      return {
        border: 'border-lime-green',
        titleBg: 'bg-lime-green/10',
        titleText: 'text-lime-green',
        outputText: 'text-lime-green/90',
      };
    case 'error':
      return {
        border: 'border-red-500',
        titleBg: 'bg-red-500/10',
        titleText: 'text-red-500',
        outputText: 'text-red-400',
      };
    case 'info':
      return {
        border: 'border-cyber-blue',
        titleBg: 'bg-cyber-blue/10',
        titleText: 'text-cyber-blue',
        outputText: 'text-cyber-blue/90',
      };
    default:
      return {
        border: 'border-border-default',
        titleBg: 'bg-bg-deep',
        titleText: 'text-text-secondary',
        outputText: 'text-text-primary',
      };
  }
};

const typeClasses = getTypeClasses(type);
---

<div class={`command-output bg-bg-card border ${typeClasses.border} rounded-lg overflow-hidden mb-4`}>
  {title && (
    <div class={`command-output-title ${typeClasses.titleBg} border-b ${typeClasses.border} py-2 px-4`}>
      <span class={`${typeClasses.titleText} text-sm font-medium`}>{title}</span>
    </div>
  )}
  <div class="command-output-body p-4">
    <pre class={`font-mono text-sm ${typeClasses.outputText} whitespace-pre-wrap break-all leading-relaxed`}>{showPrompt && '$ '}{output}</pre>
  </div>
</div>
